{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"texel",
				"texel_color"
			],
			[
				"text",
				"tex_weight"
			],
			[
				"RESOURCE",
				"RESOURCE_PKG"
			],
			[
				"RESOURCE_",
				"RESOURCE_PKG"
			],
			[
				"light_p",
				"light_limit_per_pass"
			],
			[
				"flu",
				"fluid_power"
			],
			[
				"th",
				"thin_y"
			],
			[
				"fluid",
				"fluid_power"
			],
			[
				"nor",
				"normal4"
			],
			[
				"flui",
				"fluid_strength"
			],
			[
				"colo",
				"color_strength"
			],
			[
				"ra",
				"ray_strength"
			],
			[
				"kmail",
				"kmail_message"
			],
			[
				"escap",
				"escape_capsule_welcome"
			],
			[
				"audio",
				"audio_effect_volume"
			],
			[
				"dist",
				"distance_field"
			],
			[
				"st_",
				"st_brick_window"
			],
			[
				"st_bri",
				"st_brick_window"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"command_palette":
	{
		"height": 267.0,
		"selected_items":
		[
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"line en",
				"Line Ending: Unix"
			],
			[
				"line",
				"Line Ending: Unix"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"",
				"Convert Case: snake_case"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instla",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"uui",
				"Generate UUID v4"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"hash",
				"Hasher: MD5"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/bundle",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/image",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/json",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/shader"
	],
	"file_history":
	[
		"/Users/justin/Projects/Informi/Wagoneer-Unity/Assets/Script/Coordinator/LifecycleAwareCoordinator.cs",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/shader/font-df.frag",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/bundle/Title.properties",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/image/engine.p",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/strings/Main.properties",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/README.md",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/assets/shader/font-df.vert",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/core/src/ca/informi/gdx/assets/loaders/resolvers/SequentialFileHandleResolver.java",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/android/res/values/strings.xml",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/.gradle/2.2/taskArtifacts/fileHashes.bin",
		"/Users/justin/Projects/Informi/Games/1GAW/001_wagoneer/.gradle/2.2/taskArtifacts/fileSnapshots.bin",
		"/Users/justin/Projects/Informi/Games/quanta/doc/design.md",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/rui/element/dropdown/rui_element_dropdown_list_row.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/ui/ui_draw_buffer.c",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/models_raw/window_double_stack.blend",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/models_raw/suspended_light.blend",
		"/Users/justin/Projects/Informi/Games/quanta/Debug/rui_rui.c.o.d",
		"/Users/justin/Projects/Informi/Games/quanta/resource/tree/shader/RUI.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/rui/text/rui_utf8.c",
		"/Users/justin/Projects/Informi/Games/quanta/README.md",
		"/Users/justin/Projects/Informi/Games/quanta/nbproject/Makefile-Release.mk",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/resource/type/markup.h",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/models_raw/framework_000.blend",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/mem/memory_aligned.c",
		"/Users/justin/Projects/Informi/Games/quanta/Makefile",
		"/Users/justin/Projects/Informi/Games/quanta/build/packaging/osx/template.dmg",
		"/Users/justin/Projects/Informi/Games/quanta/TODO.txt",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/resource/type/shader.h",
		"/Users/justin/Projects/Informi/Games/quanta/resource/meta/bitmap/structure_heightmap.png.crc32",
		"/Users/justin/Projects/Informi/Games/quanta/.idea/xcode.xml",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/xpl.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/rui_xpl/rui_xpl_mmgr.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/experimental/lua_ffi/lua_ffi_main.c",
		"/Volumes/Bulk/Temp/amalg/duplicates.txt",
		"/Users/justin/Projects/Informi/Games/quanta/scripts/.lldbinit",
		"/Users/justin/Projects/Informi/Games/quanta/.gitignore",
		"/Users/justin/Projects/Informi/Games/quanta/resource/tree/shader/LibBlackbody.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/shaders/LibBlackbody.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/mintomic/LICENSE",
		"/Users/justin/Projects/Informi/Games/quanta/nbproject/private/launcher.properties",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/gl3w-20120901/src/gl3w_debug.c",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/gl3w-20120901/src/gl3w_debug.h",
		"/Users/justin/Projects/Informi/Games/quanta/include/common/GL3/gl3w.h",
		"/Users/justin/Projects/Informi/Games/quanta/include/common/GL3/gl3.h",
		"/Users/justin/Projects/Informi/Games/quanta/lib/msvc/glfwdll.def",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/rui/rui_properties.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/person/person_processor_structure_affinity.c",
		"/Users/justin/Projects/Informi/Games/quanta/nbproject/project.xml",
		"/Users/justin/Projects/Informi/Games/quanta/nbproject/Package-Release.bash",
		"/Users/justin/Projects/Informi/Games/quanta/resource/tree/l10n/kvp/root.json",
		"/Users/justin/Projects/Informi/Games/quanta/resource/tree/component/light/directional.json",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/rui/event/rui_dispatcher.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/render/render_data.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/render/render_engine_init.c",
		"/Users/justin/Documents/Resumes/redirector.html",
		"/Users/justin/Projects/Informi/Games/quanta/_clang-format",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/window/input/keydefs.h",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/window/glfw3/glfw3_window.c",
		"/Users/justin/Projects/Informi/Games/quanta/include/common/glfw/glfw3.h",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/game/game_load_fixups.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/game/game_load_debug.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/kmail/kmail_attachment_execute.c",
		"/Users/justin/Projects/Informi/Games/quanta/include/common/kdtree/kdtree.h",
		"/Users/justin/Projects/Informi/Games/quanta/build/scripts/package_resources.sh",
		"/Users/justin/Projects/Informi/Games/quanta/scripts/cloc/loc.sh",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/sprites_raw/sector.tps",
		"/Users/justin/Projects/Informi/Games/quanta/resources-src/sprites_raw/sector.tps",
		"/Users/justin/Projects/Informi/Games/quanta/resource/src/resource_stuff.sh",
		"/Users/justin/Projects/Informi/Games/quanta/resources-src/resource_stuff.sh",
		"/Users/justin/Projects/Informi/Games/quanta/build/scripts/win32/dist.sh",
		"/Users/justin/Projects/Informi/Games/quanta/build/scripts/heightmaps_update.sh",
		"/Users/justin/Projects/Informi/Games/quanta/.idea/workspace.xml",
		"/Users/justin/Projects/Informi/Games/quanta/resources/structure_group/plant/cover_terran.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/structure_group/plant/cover_jungle.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/l10n/kvp/en/sdk.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/person/default_player.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/name/default_player.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/l10n/kvp/en/value_formats.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/pref/prefs_default.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/particle_emitter/default.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/PostProcess.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/PointStar.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/processor/processor_oneshot.c",
		"/Users/justin/Projects/Informi/Games/quanta/resources/renderer/profiles.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/proto/player/default.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/Effect.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/UBOLight.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/Structure.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/LibESCompat.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/src-resources/shaders/Lib.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/Lib.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/src-resources/shaders/LibBlackbody.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shader/LibBlackbody.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/.settings/language.settings.xml",
		"/Users/justin/Projects/Informi/Games/quanta/CMakeLists.txt",
		"/Users/justin/Projects/Informi/Games/quanta/nbproject/configurations.xml",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/context/context_menu.c",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/darwin/object_al/Support/NSMutableArray+WeakReferences.h",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/sync/winnt/semaphore_internal.h",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/light/light_world_position.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/view/views/sdk/view_sdk_particle_edit.c",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/render/render_effect_flip.c",
		"/Users/justin/Projects/Informi/Games/quanta/resources/proto/ship/escape_capsule.json",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/json/json_inheritance_resolve.c",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/res/json.c",
		"/Users/justin/Projects/Informi/Games/quanta/.idea/dictionaries/justin.xml",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/json/json.h",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/darwin/object_al/ObjectAL.h",
		"/Users/justin/Projects/Informi/Games/quanta/Quanta.xcodeproj/xcuserdata/justin.xcuserdatad/xcschemes/Quanta-osx-debug.xcscheme",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/darwin/object_al/AudioTrack/OALAudioTrackNotifications.h",
		"/Users/justin/Projects/Informi/Games/quanta/src/common/json/json.c",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/string/conversions.c",
		"/Users/justin/Projects/Informi/Games/quanta/resources/svl/svl_meta.json",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/platform/platform.h",
		"/Users/justin/Projects/Informi/Games/quanta/build/scripts/resource_processor.rb",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/xpl/platform/platform.c",
		"/Users/justin/Projects/Informi/Games/quanta/src-lib/common/mintomic/platform_detect.h",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shaders/Planet.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/structure_group/planet/terran/natural/bushel_tree/branch_n.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/palm/medium_3.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/palm/medium_2.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/palm/medium_1.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/palm/small_3.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/cover/shrubby1.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/cover/leafy3.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/cover/leafy2.json",
		"/Users/justin/Projects/Informi/Games/quanta/resources/shaders/UBOLight.glsl",
		"/Users/justin/Projects/Informi/Games/quanta/resources/component/structure/plant/bushel_tree/trunk.json"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			", %[a-z]+",
			"^(.+\"[^\"]*(, |\\())(\\w+) \\*(\\w+)(.*\")",
			"^(.+\"[^\"]*)(\\w+) \\*(\\w+)(.*\")",
			"^(.+\"[^\"]*)(\\w+) (\\w+)(.*\")",
			"^(.+\"[^\"]*)GLsync (\\w+)(.*\")",
			"^(.+\"[^\"]*)GLboolean (\\w+)(.*\")",
			"^(.+\"[^\"]*)GLdouble (\\w+)(.*\")",
			"^(.+\"[^\"]*)(\\w+) (\\w+)(.*\")",
			"^(.+\"[^\"]* )const (\\w+)(.*\")",
			"^(.+\"[^\"]* )(const )?GL[A-Za-z]+ (const )?\\*( const )?([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GL[A-Za-z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GL[A-Za-z]+ ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLdouble ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLubyte ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLbyte ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLshort ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLintptr ([a-zA-Z]+)(.*\")",
			"(^.+\"[^\"]+)GLsizeiptr (\\w+)(.+\")",
			"^(.+\"[^\"]* )GLintptr ([a-zA-Z]+)(.*\")",
			"(^.+\"[^\"]+)GLsizei \\*(\\w+)(.+\")",
			"(^.+\"[^\"]+)GLbitfield (\\w+)(.+\")",
			"(, |\\()(?!const )GLchar *",
			"(, |\\()(?!const ) GLchar *",
			"const GLchar *",
			"name=%p",
			"const GLchar *",
			"%s",
			"^(.+\"[^\"]* )GLdouble ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLboolean ([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GLchar \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )const GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )const GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* )(const )?GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]* (const )?)GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]*)GL[a-zA-Z]+ \\*([a-zA-Z]+)(.*\")",
			"^(.+\"[^\"]*)GL[a-zA-Z]+ \\*([a-z]+)(.*\")",
			"^(.+\"[^\"]*)GL[a-z]+ \\*([a-z]+)(.*\")",
			"^.+(\"[^\"]*)GL[a-z]+ \\*([a-z]+)(.*\")",
			"^(\"[^\"]*)GL[a-z]+ \\*([a-z]+)",
			"(\"[^\"]*)GL[a-z]+ \\*([a-z]+)",
			"(\\t(?!if).*gl3w.*)\\(",
			"\\t ",
			"(\\t .* = gl3w\\w+\\((\\w+, )*)[a-zA-Z* ]+[* ]+(\\w+)",
			"(\\t .* = gl3w\\w+\\((\\w+, )*)([a-zA-Z *]+)(\\w+)",
			"(\\t .* = gl3w\\w+\\((\\w+, )*)\\w+ (\\w+)",
			"(\\t .* = gl3w\\w+\\()\\w+ (\\w+)",
			"^(\\t [^\"]+\\()GL\\w+ ",
			"(\\t .*\\()GLenum ",
			"(\\t gl3w\\w+\\(.*?)([^,]+ \\*)(\\w+)([,)])",
			", \\*",
			"(\\t gl3w\\w+\\(.*?)([^,]+ \\*)(\\w+)([,)])",
			"(\\t gl3w\\w+\\(.*?)([^,]+ )(\\w+)([,)])",
			"(\\t gl3w\\w+\\(.*)([^,]+ )(\\w+)([,)])",
			"(\\t gl3w\\w+\\(.*)([^,]+ \\w+)([,)])",
			"(\\t gl3w.*)const GLvoid \\*",
			"(\\t gl3w.*)GLfloat \\*",
			"(\\t gl3w.*)GLfloat \\* ",
			"(\\t gl3w.*)GLenum ",
			"(\\t gl3w\\w+\\((\\w+, ))\\S+ ",
			"(\\t gl3w\\w+\\()\\S+ ",
			"(\\t gl3w\\w+\\(.*)[a-zA-Z]+( \\*)?(\\w+)",
			"(\\t gl3w\\w+\\(.*)[a-zA-Z *]+?(\\w+)",
			"(\\t gl3w\\w+\\(.*)[a-zA-Z *]+(\\w+)",
			"(gl3w\\w+) ",
			"(gl3w.*\".*?)GL(float|void|int)\\* \\*(\\w+)",
			"(gl3w.*\".*?)GL(float|void|int) \\*(\\w+)",
			"(gl3w.*\".*?)(const ?) GL(float|void|int) \\*(\\w+)",
			"(gl3w.*\".*?)(const?) GL(float|void|int) \\*(\\w+)",
			"(gl3w.*\".*?)GLsizei (\\w+)",
			"(gl3w.*\".*?)GLuint (\\w+)",
			"(gl3w.*\".*?)GLint (\\w+)",
			"(gl3w.*\".*?)GLfloat (\\w+)",
			"(gl3w.*\".*?)GLenum (\\w+)",
			"(\".*\",.* )\\w+ \\*?",
			"(gl3w.*\"(, \\w+, )+)\\w+ (\\w+)",
			"(gl3w.*\"(, \\w+)+)\\w+ (\\w+)",
			"(gl3w.*\"(, \\w)+)\\w+ (\\w+)",
			"(gl3w.*\".*?)GLenum (\\w+)",
			"(gl3w.*\".*)GLenum (\\w+)",
			"\\)\\);",
			"(gl3wDebugHook\\w+\\(\\w+, \".*\", .+, )\\w+ (\\w+)",
			"(gl3wDebugHook\\w+\\(\\w+, \".*\", .+,) \\w+ (\\w+)",
			"(gl3wDebugHook\\w+\\(\\w+, \".*\", .+)\\w+ (\\w+)",
			"(gl3wDebugHook\\w+\\(\\w+, \".*\", ).+\\w+ (\\w+)",
			"(gl3wDebugHook\\w+\\(\\w+, \".*\", ) \\(\\w+ (\\w+)",
			"(\"\\w+\\(.*?)GLenum (\\w+)(.+\")",
			"(\"\\w+\\(.*)GLenum (\\w+)(.+\")",
			"(\"\\w+\\(.*)GLenum \\w+(.+\")",
			"(\"\\w+\\(.+?)GLenum \\w+(.+\")",
			"(\".+?)GLenum \\w+",
			"(.+?)GLenum \\w+",
			"(\".+?)GLenum \\w+",
			"\"(.+?)GLenum \\w+",
			"\\}",
			"\\t\\n",
			"(\"gl\\w+) \\(",
			"\\t void result = (.*\\n.*\\n)\\t return result;\\n",
			";",
			" \\}",
			"(.+ \\{)",
			"void result = (.*\\n.*\\n)\\treturn result;",
			"\"(gl\\w+) ",
			"return result;\\n",
			"; ",
			"\\}",
			"\\{",
			"{",
			"\"(gl[a-zA-Z]+) (\\(.+\\))\"",
			"\"(gl[a-zA-Z]) (\\(.+\\))\"",
			"^\\s*GLAPI (.*) APIENTRY gl(.+)( \\(.*\\));",
			"\\s*GLAPI (.*) APIENTRY gl(.+)( \\(.*\\));",
			"\\s*GLAPI (.*) APIENTRY gl(.+)(\\(.*\\));",
			"^\\n",
			"typedef .*",
			"^(?!.*(?://|include|Quanta|GLAPI)).*\\s*",
			"^(?!(?://|GLAPI)).*\\s*",
			"(k_(\\S+)) = \\d+,.*",
			"#define GLFW_KEY_(\\S+) (\\d+)",
			"#define GLFW_KEY_(\\S+) (\\d+) (/\\* (.) \\*/)?",
			"#define GLFW_KEY_(\\S+) (\\d+) (/\\* (.) \\*/)",
			"#define GLFW_KEY_(\\S+) (\\d+)",
			"resources/",
			"5",
			"/\\* (.*) \\*/",
			"/\\* (.*)(//)?",
			"^/\\* (.*)(//)?"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			";\n",
			"$1$4=%p$5",
			"$1$3=%p$4",
			"$1$2=%p$3",
			"$1$2=%c$3",
			"$1$2=%f$3",
			"$1$2$3",
			"$1$2=%p$3",
			"$1$2=%f$3",
			"$1$2=%hhu$3",
			"$1$2=%hd$3",
			"$1$2=%td$3",
			"$1$2=%p$3",
			"$1$2=%u$3",
			"name=%s",
			"%p",
			"$1$2=%f$3",
			"$1$2=%c$3",
			"$1$2=%s$3",
			"$1$2=%p$3",
			"$1$3=%p$4",
			"$1$2=%p$3",
			"$1$2=%p",
			"$1%2=%p",
			"$1Impl(",
			"$1Impl",
			"\\t",
			"$1$3",
			"$1$4",
			"$1$3",
			"$1$2",
			"$1",
			"$1 $3$4",
			", ",
			"$1 $3$4",
			"$1$3$4",
			"$1$2",
			"$1$3",
			"$1$2",
			"$1",
			"$1$3=%p",
			"$1$4=%p",
			"$1$2=%d",
			"$1$2=%u",
			"$1$2=%d",
			"$1$2=%f",
			"$1$2=%u",
			"$1",
			"$1$3",
			"$1$2",
			"$1$2=%u",
			"$1 $2=%u",
			");",
			"$1$2",
			"$1$3",
			"$1$2=%u$3",
			"$1%u$2",
			"$1%u",
			"}\\n",
			"",
			"$1(",
			"\\t $1",
			"$1",
			";\\n\\t",
			"\\n}",
			"$1\\n\\t",
			"$1",
			"\"$1",
			"return result;",
			";\\n\\t",
			"\\n}\\n",
			"{\\n\\t",
			"\"$1$2\"",
			"$1 gl3w$2_Debug$3 { if (gl3wDebugHook_Pre) gl3wDebugHook_Pre(gl3w$2, \"gl$2$3\", $3); $1 result = gl3w$2$3; if (gl3wDebugHook_Post) gl3wDebugHook_Post(gl3w$2, \"gl$2$3\", $3); return result; }",
			"$1 gl3w$2_Debug$3;",
			"$1 gl3w$2_Debug$3;\\n",
			"$1 gl3wDebug_$2$3;\\n",
			"$1 gl3w$2Debug$3;\\n",
			"$1 gl3w$2Debug$3",
			"",
			"{\\1, GLFW_KEY_\\U$2},",
			"{\\1, GLFW_KEY_\\U$1},",
			"\\tk_\\L$1 = $2,",
			"\\tk_\\L$1 = $2, // $4",
			"\\tk_\\L$1 = $2,",
			"// $1",
			"// ",
			"// $1",
			"$1\\L$2",
			"cJSON",
			"$1_\\L$2",
			"$1_$2\\L",
			"$1\\L",
			"xpl_json_create_string",
			"xpl_json_add_item_to_object",
			"\\1\\L",
			"[\"s\", \"group:plant/vegetation_jungle\"]",
			"st_ship_console",
			"ca.informi.srq.structure_group",
			"ca.informi.srq.component.structure",
			"Structure",
			"\"console_helm\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "wagoneer.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"frag",
				"android/assets/shader/font-df.frag"
			],
			[
				"vert",
				"android/assets/shader/font-df.vert"
			],
			[
				"rui_inter",
				"src/common/rui/element/rui_interactive_element.c"
			],
			[
				"text",
				"resource/src/shaders/Text.glsl"
			],
			[
				"shader",
				"src-lib/common/xpl/glim/shader.c"
			],
			[
				"lun",
				"src/common/rui/skin/rui_skin_luna.c"
			],
			[
				".l",
				"scripts/.lldbinit"
			],
			[
				"lib",
				"resource/src/shaders/Lib.glsl"
			],
			[
				"gl3w_de",
				"src-lib/common/gl3w-20120901/src/gl3w_debug.c"
			],
			[
				"gl3w_d",
				"src-lib/common/gl3w-20120901/src/gl3w_debug.h"
			],
			[
				"propert",
				"src/common/rui/rui_properties.c"
			],
			[
				"glfw3_key",
				"src/common/window/glfw3/input/glfw3_keymap.c"
			],
			[
				"keyd",
				"src/common/window/input/keydefs.h"
			],
			[
				"post",
				"resources/shader/Postprocess.glsl"
			],
			[
				"effect",
				"resources/shader/Effect.glsl"
			],
			[
				"profile",
				"resources/renderer/profiles.json"
			],
			[
				"json",
				"src-lib/common/xpl/res/json.c"
			],
			[
				"jsonh",
				"src/common/json/json.h"
			],
			[
				"json.",
				"src/common/json/json.c"
			],
			[
				"platform.h",
				"src-lib/common/xpl/platform/platform.h"
			],
			[
				"profiles",
				"resources/renderer/profiles.json"
			],
			[
				"svl_me",
				"resources/svl/svl_meta.json"
			],
			[
				"ubol",
				"resources/shaders/UBOLight.glsl"
			],
			[
				"structure",
				"resources/shaders/Structure.glsl"
			],
			[
				"profil",
				"resources/renderer/profiles.json"
			],
			[
				"svl_",
				"resources/svl/svl_meta.json"
			],
			[
				"svl_m",
				"resources/svl/svl_meta.json"
			],
			[
				"l10n_en",
				"resources/l10n/l10n_en_2.json"
			],
			[
				"l10n",
				"resources/l10n/l10n_en_2.json"
			],
			[
				"sky",
				"resources/shaders/Skybox.glsl"
			],
			[
				"structur",
				"resources/shaders/Structure.glsl"
			],
			[
				"person",
				"resources/shaders/Person.glsl"
			],
			[
				"plan",
				"resources/shaders/Planet.glsl"
			],
			[
				"esca",
				"resources/component/structure/ship/complete/escape_capsule.json"
			],
			[
				"esc",
				"resources/proto/ship/escape_capsule.json"
			],
			[
				"svl",
				"resources/svl/svl_meta.json"
			],
			[
				"scenario_li",
				"resources/scenario/scenario_lifeboat_survival.json"
			],
			[
				"imui",
				"imui/imui.json"
			],
			[
				"capsule",
				"proto/ship/escape_capsule.json"
			],
			[
				"snow",
				"component/structure/planet/network/snow_trail_crossroads.json"
			],
			[
				"terra",
				"component/structure/planet/network/terran_street.json"
			],
			[
				"i",
				"input/input.json"
			],
			[
				"svl_pro",
				"svl/svl_process.json"
			],
			[
				"input",
				"input.json"
			],
			[
				"l1",
				"l10n_en_0.json"
			],
			[
				"phon",
				"shaders/PhongModel.glsl"
			],
			[
				"vox",
				"shaders/Voxel.glsl"
			],
			[
				"escape_capsule.json",
				"data/component/structure/ship/complete/escape_capsule.json"
			],
			[
				"",
				"l10n_en_0.json"
			],
			[
				"nav",
				"data/templates/kmail/en/escape_capsule_nav.txt"
			],
			[
				"welcome",
				"data/templates/kmail/en/escape_capsule_welcome.txt"
			],
			[
				"_new",
				"data/save/_new_sdk.json"
			],
			[
				"_ne",
				"data/save/_new.json"
			],
			[
				"pre",
				"prefs_default.json"
			],
			[
				".txt",
				"data/templates/kmail/en/escape_capsule_welcome.txt"
			],
			[
				"default.json",
				"data/component/kmail_message/default.json"
			],
			[
				"im",
				"imui/imui.json"
			],
			[
				"input.",
				"input.json"
			],
			[
				"person.js",
				"data/component/extent/person.json"
			],
			[
				"new",
				"data/save/_new.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"draw_slider",
				"skin_luna_draw_slider_handle"
			]
		],
		"width": 683.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
